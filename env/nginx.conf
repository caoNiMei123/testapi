#user  nobody;
#由于pcs线上机器有8核，12核，16核，所以这里配置processes个数为8
worker_processes  8;
#一个worker能打开的最大句柄数目
worker_rlimit_nofile 10240;

#error_log  logs/error.log;
error_log  logs/error.log  debug;
#error_log  logs/error.log  info;
pid        logs/nginx.pid;

events {
    use epoll;
	#一个worker能打开的最大连接数目
    worker_connections  10240;
}


http {
	resolver 10.91.0.231;#jx dns 1
	#resolver 10.91.0.237;#jx dns 2
	#resolver 10.57.0.231;#tc dns 1
	#resolver 10.57.0.237;#tc dns 2
    include       mime.types;
    default_type  application/octet-stream;
	
	#开启sendfile，从磁盘读取文件后直接发送到网卡缓冲区，减少用户态和内核态的数据拷贝
    sendfile        on;
	#同时设置了两个值的话，将会在第一个buf发送的时候，强制push数据，而第二个buf时，将会调用tcp_cork来打开nagle算法，也就是后面的都会应用tcp_nopush
    tcp_nopush     on;
	tcp_nodelay on;
	#请求nginx时，http header如果想要支持下划线的话，需要增加如下配置
	underscores_in_headers on;
	#该配置定义了正常情况下，nginx接收用户请求中http header(包括http头和http行)时分配的内存buffer大小，超过这个大小的时候，large_client_header_buffers配置将生效
	client_header_buffer_size 8k;
	#该配置定义了nginx接收一个超大http header(包括http头和http行)，用到的buffer个数和buffer大小
	large_client_header_buffers 4 32k;
	#该配置项定义了nginx接收http包体的最大限制
	client_max_body_size 21m;
	#该配置项定义了nginx接收http包体的内存缓冲区大小
	client_body_buffer_size 4m;
    #keepalive_timeout  0;
	#一个keepalive连接在闲置一定时间后，会关闭这个连接，nginx默认是75秒
    keepalive_timeout  60;
	#一个keepalive连接最多处理多少个请求，nginx默认是100 !lighttpd是16
	keepalive_requests 128;
	#在接收客户端header过程中，如果超过一定时间没读取到客户端发过来的数据，则认为是超时，向客户端返回408，默认60s
	client_header_timeout 300; 
	#在接收客户端body过程中，如果超过一定时间没读取到客户端发过来的数据，则认为是超时，默认60s
	client_body_timeout 300; 
	#在向客户端发送数据的过程中，如果客户端超过一定的时间没有去接收这个数据包，那么nginx会关闭这个连接
	send_timeout 360; 	
	#对静态文件进行缓存，指定缓存的最大数目为1024个，如果缓存溢出，将会使用LRU进行淘汰，指定缓存文件被移出的时间1s
	open_file_cache max=1024 inactive=1s;
	log_format main '$remote_addr $connection $remote_user $request_time [$time_local] "$hostname" "$request" $status $body_bytes_sent mod_gzip: -pct "$http_referer" "$http_cookie" "$http_user_agent"';
	access_log logs/access_log main;
	
	#开启gzip模块
	#主要在nginx服务端将页面进行压缩，然后在浏览器端进行解压和解析，目前大多数流行的浏览器都支持gzip格式的解析
	gzip off;
	#设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取，建议设置成大于1k的字节数，小于1k可能会越压越大
    gzip_min_length 1k;
	#gzip压缩比，1-9，1表示压缩比最小处理速度最快，9表示压缩比最大但处理最慢
    gzip_comp_level 5;
	#其作用是按块大小的倍数申请内存空间，用于存储gzip的压缩数据
	#如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果
    gzip_buffers 4 16k;
	#识别http的协议版本
    gzip_http_version 1.0;
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript text/xml;
	#和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，根据客户端的HTTP头来判断，是否需要压缩
    gzip_vary on;	
	
	error_page 404 http://pan.baidu.com/error/404.html;
	error_page 500 502 503 504 505 http://pan.baidu.com/error/core.html;

    
	server {
        listen       8089;
        server_name  localhost;
		
		server_tokens off;
		more_set_headers 'Cache-Control:no-cache';
		more_set_headers 'Server: lighttpd';
		more_set_headers 'X-Powered-By:PHP/5.4.24';
		more_set_headers 'Pragma:no-cache';
		
		location = /favicon.ico {
			log_not_found off;
		}

	    		
		location ~* ^/(rest/2\.0/) {
			root  /home/gaowei/gitcode/trunk/api/;
            rewrite ^/rest/2\.0/carpool/.* /carpool/index.php break;			
            fastcgi_pass unix:/home/gaowei/php/php-fastcgi.socket;
            fastcgi_index index.php;
            #默认60秒，和lighttpd的连接超时时间保持一致
            fastcgi_connect_timeout 5;
            #默认60秒，和php-cgi连接成功后，等候后端服务器响应时间(也可以说是后端服务器处理请求的时间)
            fastcgi_read_timeout 80;
            #默认60秒，后端服务器数据回传时间，就是在规定时间之内后端服务器必须传完所有的数据
            fastcgi_send_timeout 60;
            include fastcgi.conf;		
		}

        location ~* ^/(mis/) {
			root  /home/gaowei/gitcode/testapi/trunk/mis/;
            rewrite ^/mis/.* /index.php break;			
            fastcgi_pass unix:/home/gaowei/php/php-fastcgi.socket;
            fastcgi_index index.php;
            #默认60秒，和lighttpd的连接超时时间保持一致
            fastcgi_connect_timeout 5;
            #默认60秒，和php-cgi连接成功后，等候后端服务器响应时间(也可以说是后端服务器处理请求的时间)
            fastcgi_read_timeout 80;
            #默认60秒，后端服务器数据回传时间，就是在规定时间之内后端服务器必须传完所有的数据
            fastcgi_send_timeout 60;
            include fastcgi.conf;		
		}
        location ~* ^/(assets/) {
			root  /home/gaowei/gitcode/testapi/trunk/mis/;
		}
		location ~ .*.(inc|bak|sql|old)$ {
			deny all;
		}
        		
    }
	
	

}
